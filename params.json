{"name":"Ansi","tagline":"Use colors in PHP terminal apps!","body":"# Ansi\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/malenki/ansi/v/stable.svg)](https://packagist.org/packages/malenki/ansi) [![Total Downloads](https://poser.pugx.org/malenki/ansi/downloads.svg)](https://packagist.org/packages/malenki/ansi) [![Latest Unstable Version](https://poser.pugx.org/malenki/ansi/v/unstable.svg)](https://packagist.org/packages/malenki/ansi) [![License](https://poser.pugx.org/malenki/ansi/license.svg)](https://packagist.org/packages/malenki/ansi)\r\n\r\nUse colors and styles in PHP terminal apps!\r\n\r\nQuick example to understand:\r\n\r\n```php\r\nuse Malenki\\Ansi;\r\n\r\n$a = new Ansi('Hello World!');\r\necho $a->red->bold->underline; // you get string in red color, bold and underline! :)\r\n```\r\n\r\nThis was just little example, please read all this doc to see how to use Ansi! You can use metthod or magic getters, as you want, and chaining methods are available.\r\n\r\n## Install It\r\n\r\nYou can get code here, from github by cloning this repository, or you can use [composer](https://getcomposer.org/) too. [Ansi is available on Packagist](https://packagist.org/packages/malenki/ansi)!\r\n\r\nSo, to install it using **composer**, just put something similar to the following lines into your own `composer.json` project file:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"malenki/ansi\": \"1.2.6\",\r\n    }\r\n}\r\n```\r\n\r\n## Play With It\r\n\r\n### What It can Do\r\nYou can use many **foregrounds**, **backgrounds** and **styles**:\r\n\r\n - Available **foreground** colors are: `black`, `red`, `green`, `yellow`, `blue`, `purple`, `cyan` and `white`.\r\n\r\n - Available **background** colors are:  `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan` and `gray`.\r\n\r\n - Available **styles** are: `faint`, `bold`, `italic` and `underline`, but this effects may appear in different way into some terminals.\r\n\r\nAnsi can also **parse** a string containing special XML-like tags to format it.\r\n\r\nMagic getters are available too, and many methods are chainable. Look at the [examples directory](https://github.com/malenkiki/ansi/tree/master/examples) or read next section to see how to use Ansi.\r\n\r\n### Example Of Use\r\n\r\n\"Hello World!\" in red:\r\n\r\n``` php\r\nuse Malenki\\Ansi;\r\n\r\n$a = new Ansi('Hello World!');\r\necho $a->fg('red');\r\n```\r\n\r\nYou can **set string after constructor call** using `v()` or `value()` methods, so you can keep color and formating and apply them for other strings:\r\n\r\n```php\r\n$a = new Ansi();\r\n$a->fg('red');\r\necho $a->v('Hello World!'); //in red\r\necho $a->v('Hello World again!'); //in red too\r\n\r\n```\r\n\r\n\"Hello World!\" in red, background yellow:\r\n\r\n``` php\r\nuse Malenki\\Ansi;\r\necho (new Ansi('Hello World!'))->fg('red')->bg('yellow');\r\n```\r\n\r\n\"Hello World!\" in red, background yellow and in bold:\r\n\r\n``` php\r\nuse Malenki\\Ansi;\r\necho (new Ansi('Hello World!'))->fg('red')->bg('yellow')->bold();\r\n```\r\n\r\nYou can use rendered string too:\r\n``` php\r\nuse Malenki\\Ansi;\r\n$str = (new Ansi('Hello World!'))->fg('red')->bg('yellow')->bold()->render();\r\n```\r\n\r\nAll methods are chainable, except `render()`.\r\n\r\n\r\nSome magic getters allow new syntax, so, all **foreground colors** are available by calling their name as attribute, it is also true for **faint**, **bold**, **italic** and **underline**. Example:\r\n\r\n```php\r\necho (new Ansi('Hello World!'))->red->bold->underline;\r\n```\r\n\r\nFor **background colors**, you must preceed its name by `bg` like you can see into this example:\r\n\r\n```php\r\necho (new Ansi('Hello World!'))->red->bold->underline->bg_blue;\r\n```\r\n\r\nMore complex feature just added: parsing string having tags with same name as foreground colors and effects.\r\n\r\nSo an example to understand:\r\n\r\n```php\r\necho Ansi::parse('You can <bold>parse <cyan>string</cyan></bold> containing <red>some tags</red> to have <underline><yellow>some effects</yellow></underline> too!');\r\n```\r\n\r\nEnjoy!\r\n\r\n## MIT Open Source License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}